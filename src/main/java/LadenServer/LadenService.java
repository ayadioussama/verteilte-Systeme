/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package LadenServer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-23")
public class LadenService {

  public interface Iface {

    public long getPrice(String articleName) throws org.apache.thrift.TException;

    public int orderArticle(String articleName, String receiveDate, String customer, int amount) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getPrice(String articleName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void orderArticle(String articleName, String receiveDate, String customer, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getPrice(String articleName) throws org.apache.thrift.TException
    {
      send_getPrice(articleName);
      return recv_getPrice();
    }

    public void send_getPrice(String articleName) throws org.apache.thrift.TException
    {
      getPrice_args args = new getPrice_args();
      args.setArticleName(articleName);
      sendBase("getPrice", args);
    }

    public long recv_getPrice() throws org.apache.thrift.TException
    {
      getPrice_result result = new getPrice_result();
      receiveBase(result, "getPrice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrice failed: unknown result");
    }

    public int orderArticle(String articleName, String receiveDate, String customer, int amount) throws org.apache.thrift.TException
    {
      send_orderArticle(articleName, receiveDate, customer, amount);
      return recv_orderArticle();
    }

    public void send_orderArticle(String articleName, String receiveDate, String customer, int amount) throws org.apache.thrift.TException
    {
      orderArticle_args args = new orderArticle_args();
      args.setArticleName(articleName);
      args.setReceiveDate(receiveDate);
      args.setCustomer(customer);
      args.setAmount(amount);
      sendBase("orderArticle", args);
    }

    public int recv_orderArticle() throws org.apache.thrift.TException
    {
      orderArticle_result result = new orderArticle_result();
      receiveBase(result, "orderArticle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "orderArticle failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPrice(String articleName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrice_call method_call = new getPrice_call(articleName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String articleName;
      public getPrice_call(String articleName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.articleName = articleName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrice_args args = new getPrice_args();
        args.setArticleName(articleName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPrice();
      }
    }

    public void orderArticle(String articleName, String receiveDate, String customer, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      orderArticle_call method_call = new orderArticle_call(articleName, receiveDate, customer, amount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class orderArticle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String articleName;
      private String receiveDate;
      private String customer;
      private int amount;
      public orderArticle_call(String articleName, String receiveDate, String customer, int amount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.articleName = articleName;
        this.receiveDate = receiveDate;
        this.customer = customer;
        this.amount = amount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orderArticle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        orderArticle_args args = new orderArticle_args();
        args.setArticleName(articleName);
        args.setReceiveDate(receiveDate);
        args.setCustomer(customer);
        args.setAmount(amount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_orderArticle();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPrice", new getPrice());
      processMap.put("orderArticle", new orderArticle());
      return processMap;
    }

    public static class getPrice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrice_args> {
      public getPrice() {
        super("getPrice");
      }

      public getPrice_args getEmptyArgsInstance() {
        return new getPrice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPrice_result getResult(I iface, getPrice_args args) throws org.apache.thrift.TException {
        getPrice_result result = new getPrice_result();
        result.success = iface.getPrice(args.articleName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class orderArticle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orderArticle_args> {
      public orderArticle() {
        super("orderArticle");
      }

      public orderArticle_args getEmptyArgsInstance() {
        return new orderArticle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public orderArticle_result getResult(I iface, orderArticle_args args) throws org.apache.thrift.TException {
        orderArticle_result result = new orderArticle_result();
        result.success = iface.orderArticle(args.articleName, args.receiveDate, args.customer, args.amount);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPrice", new getPrice());
      processMap.put("orderArticle", new orderArticle());
      return processMap;
    }

    public static class getPrice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPrice_args, Long> {
      public getPrice() {
        super("getPrice");
      }

      public getPrice_args getEmptyArgsInstance() {
        return new getPrice_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getPrice_result result = new getPrice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPrice_result result = new getPrice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPrice_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getPrice(args.articleName,resultHandler);
      }
    }

    public static class orderArticle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, orderArticle_args, Integer> {
      public orderArticle() {
        super("orderArticle");
      }

      public orderArticle_args getEmptyArgsInstance() {
        return new orderArticle_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            orderArticle_result result = new orderArticle_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            orderArticle_result result = new orderArticle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, orderArticle_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.orderArticle(args.articleName, args.receiveDate, args.customer, args.amount,resultHandler);
      }
    }

  }

  public static class getPrice_args implements org.apache.thrift.TBase<getPrice_args, getPrice_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPrice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrice_args");

    private static final org.apache.thrift.protocol.TField ARTICLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("articleName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrice_argsTupleSchemeFactory());
    }

    public String articleName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARTICLE_NAME((short)1, "articleName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARTICLE_NAME
            return ARTICLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARTICLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("articleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrice_args.class, metaDataMap);
    }

    public getPrice_args() {
    }

    public getPrice_args(
      String articleName)
    {
      this();
      this.articleName = articleName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrice_args(getPrice_args other) {
      if (other.isSetArticleName()) {
        this.articleName = other.articleName;
      }
    }

    public getPrice_args deepCopy() {
      return new getPrice_args(this);
    }

    @Override
    public void clear() {
      this.articleName = null;
    }

    public String getArticleName() {
      return this.articleName;
    }

    public getPrice_args setArticleName(String articleName) {
      this.articleName = articleName;
      return this;
    }

    public void unsetArticleName() {
      this.articleName = null;
    }

    /** Returns true if field articleName is set (has been assigned a value) and false otherwise */
    public boolean isSetArticleName() {
      return this.articleName != null;
    }

    public void setArticleNameIsSet(boolean value) {
      if (!value) {
        this.articleName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARTICLE_NAME:
        if (value == null) {
          unsetArticleName();
        } else {
          setArticleName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARTICLE_NAME:
        return getArticleName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARTICLE_NAME:
        return isSetArticleName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrice_args)
        return this.equals((getPrice_args)that);
      return false;
    }

    public boolean equals(getPrice_args that) {
      if (that == null)
        return false;

      boolean this_present_articleName = true && this.isSetArticleName();
      boolean that_present_articleName = true && that.isSetArticleName();
      if (this_present_articleName || that_present_articleName) {
        if (!(this_present_articleName && that_present_articleName))
          return false;
        if (!this.articleName.equals(that.articleName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_articleName = true && (isSetArticleName());
      list.add(present_articleName);
      if (present_articleName)
        list.add(articleName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPrice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArticleName()).compareTo(other.isSetArticleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArticleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleName, other.articleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrice_args(");
      boolean first = true;

      sb.append("articleName:");
      if (this.articleName == null) {
        sb.append("null");
      } else {
        sb.append(this.articleName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrice_argsStandardSchemeFactory implements SchemeFactory {
      public getPrice_argsStandardScheme getScheme() {
        return new getPrice_argsStandardScheme();
      }
    }

    private static class getPrice_argsStandardScheme extends StandardScheme<getPrice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARTICLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.articleName = iprot.readString();
                struct.setArticleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.articleName != null) {
          oprot.writeFieldBegin(ARTICLE_NAME_FIELD_DESC);
          oprot.writeString(struct.articleName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrice_argsTupleSchemeFactory implements SchemeFactory {
      public getPrice_argsTupleScheme getScheme() {
        return new getPrice_argsTupleScheme();
      }
    }

    private static class getPrice_argsTupleScheme extends TupleScheme<getPrice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArticleName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArticleName()) {
          oprot.writeString(struct.articleName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.articleName = iprot.readString();
          struct.setArticleNameIsSet(true);
        }
      }
    }

  }

  public static class getPrice_result implements org.apache.thrift.TBase<getPrice_result, getPrice_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPrice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrice_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrice_result.class, metaDataMap);
    }

    public getPrice_result() {
    }

    public getPrice_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrice_result(getPrice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getPrice_result deepCopy() {
      return new getPrice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getPrice_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrice_result)
        return this.equals((getPrice_result)that);
      return false;
    }

    public boolean equals(getPrice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPrice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrice_resultStandardSchemeFactory implements SchemeFactory {
      public getPrice_resultStandardScheme getScheme() {
        return new getPrice_resultStandardScheme();
      }
    }

    private static class getPrice_resultStandardScheme extends StandardScheme<getPrice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrice_resultTupleSchemeFactory implements SchemeFactory {
      public getPrice_resultTupleScheme getScheme() {
        return new getPrice_resultTupleScheme();
      }
    }

    private static class getPrice_resultTupleScheme extends TupleScheme<getPrice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class orderArticle_args implements org.apache.thrift.TBase<orderArticle_args, orderArticle_args._Fields>, java.io.Serializable, Cloneable, Comparable<orderArticle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderArticle_args");

    private static final org.apache.thrift.protocol.TField ARTICLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("articleName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RECEIVE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveDate", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("customer", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new orderArticle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new orderArticle_argsTupleSchemeFactory());
    }

    public String articleName; // required
    public String receiveDate; // required
    public String customer; // required
    public int amount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARTICLE_NAME((short)1, "articleName"),
      RECEIVE_DATE((short)2, "receiveDate"),
      CUSTOMER((short)3, "customer"),
      AMOUNT((short)4, "amount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARTICLE_NAME
            return ARTICLE_NAME;
          case 2: // RECEIVE_DATE
            return RECEIVE_DATE;
          case 3: // CUSTOMER
            return CUSTOMER;
          case 4: // AMOUNT
            return AMOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARTICLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("articleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECEIVE_DATE, new org.apache.thrift.meta_data.FieldMetaData("receiveDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("customer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderArticle_args.class, metaDataMap);
    }

    public orderArticle_args() {
    }

    public orderArticle_args(
      String articleName,
      String receiveDate,
      String customer,
      int amount)
    {
      this();
      this.articleName = articleName;
      this.receiveDate = receiveDate;
      this.customer = customer;
      this.amount = amount;
      setAmountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public orderArticle_args(orderArticle_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetArticleName()) {
        this.articleName = other.articleName;
      }
      if (other.isSetReceiveDate()) {
        this.receiveDate = other.receiveDate;
      }
      if (other.isSetCustomer()) {
        this.customer = other.customer;
      }
      this.amount = other.amount;
    }

    public orderArticle_args deepCopy() {
      return new orderArticle_args(this);
    }

    @Override
    public void clear() {
      this.articleName = null;
      this.receiveDate = null;
      this.customer = null;
      setAmountIsSet(false);
      this.amount = 0;
    }

    public String getArticleName() {
      return this.articleName;
    }

    public orderArticle_args setArticleName(String articleName) {
      this.articleName = articleName;
      return this;
    }

    public void unsetArticleName() {
      this.articleName = null;
    }

    /** Returns true if field articleName is set (has been assigned a value) and false otherwise */
    public boolean isSetArticleName() {
      return this.articleName != null;
    }

    public void setArticleNameIsSet(boolean value) {
      if (!value) {
        this.articleName = null;
      }
    }

    public String getReceiveDate() {
      return this.receiveDate;
    }

    public orderArticle_args setReceiveDate(String receiveDate) {
      this.receiveDate = receiveDate;
      return this;
    }

    public void unsetReceiveDate() {
      this.receiveDate = null;
    }

    /** Returns true if field receiveDate is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiveDate() {
      return this.receiveDate != null;
    }

    public void setReceiveDateIsSet(boolean value) {
      if (!value) {
        this.receiveDate = null;
      }
    }

    public String getCustomer() {
      return this.customer;
    }

    public orderArticle_args setCustomer(String customer) {
      this.customer = customer;
      return this;
    }

    public void unsetCustomer() {
      this.customer = null;
    }

    /** Returns true if field customer is set (has been assigned a value) and false otherwise */
    public boolean isSetCustomer() {
      return this.customer != null;
    }

    public void setCustomerIsSet(boolean value) {
      if (!value) {
        this.customer = null;
      }
    }

    public int getAmount() {
      return this.amount;
    }

    public orderArticle_args setAmount(int amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARTICLE_NAME:
        if (value == null) {
          unsetArticleName();
        } else {
          setArticleName((String)value);
        }
        break;

      case RECEIVE_DATE:
        if (value == null) {
          unsetReceiveDate();
        } else {
          setReceiveDate((String)value);
        }
        break;

      case CUSTOMER:
        if (value == null) {
          unsetCustomer();
        } else {
          setCustomer((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARTICLE_NAME:
        return getArticleName();

      case RECEIVE_DATE:
        return getReceiveDate();

      case CUSTOMER:
        return getCustomer();

      case AMOUNT:
        return getAmount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARTICLE_NAME:
        return isSetArticleName();
      case RECEIVE_DATE:
        return isSetReceiveDate();
      case CUSTOMER:
        return isSetCustomer();
      case AMOUNT:
        return isSetAmount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof orderArticle_args)
        return this.equals((orderArticle_args)that);
      return false;
    }

    public boolean equals(orderArticle_args that) {
      if (that == null)
        return false;

      boolean this_present_articleName = true && this.isSetArticleName();
      boolean that_present_articleName = true && that.isSetArticleName();
      if (this_present_articleName || that_present_articleName) {
        if (!(this_present_articleName && that_present_articleName))
          return false;
        if (!this.articleName.equals(that.articleName))
          return false;
      }

      boolean this_present_receiveDate = true && this.isSetReceiveDate();
      boolean that_present_receiveDate = true && that.isSetReceiveDate();
      if (this_present_receiveDate || that_present_receiveDate) {
        if (!(this_present_receiveDate && that_present_receiveDate))
          return false;
        if (!this.receiveDate.equals(that.receiveDate))
          return false;
      }

      boolean this_present_customer = true && this.isSetCustomer();
      boolean that_present_customer = true && that.isSetCustomer();
      if (this_present_customer || that_present_customer) {
        if (!(this_present_customer && that_present_customer))
          return false;
        if (!this.customer.equals(that.customer))
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_articleName = true && (isSetArticleName());
      list.add(present_articleName);
      if (present_articleName)
        list.add(articleName);

      boolean present_receiveDate = true && (isSetReceiveDate());
      list.add(present_receiveDate);
      if (present_receiveDate)
        list.add(receiveDate);

      boolean present_customer = true && (isSetCustomer());
      list.add(present_customer);
      if (present_customer)
        list.add(customer);

      boolean present_amount = true;
      list.add(present_amount);
      if (present_amount)
        list.add(amount);

      return list.hashCode();
    }

    @Override
    public int compareTo(orderArticle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArticleName()).compareTo(other.isSetArticleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArticleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleName, other.articleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceiveDate()).compareTo(other.isSetReceiveDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiveDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveDate, other.receiveDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCustomer()).compareTo(other.isSetCustomer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustomer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customer, other.customer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("orderArticle_args(");
      boolean first = true;

      sb.append("articleName:");
      if (this.articleName == null) {
        sb.append("null");
      } else {
        sb.append(this.articleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiveDate:");
      if (this.receiveDate == null) {
        sb.append("null");
      } else {
        sb.append(this.receiveDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("customer:");
      if (this.customer == null) {
        sb.append("null");
      } else {
        sb.append(this.customer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class orderArticle_argsStandardSchemeFactory implements SchemeFactory {
      public orderArticle_argsStandardScheme getScheme() {
        return new orderArticle_argsStandardScheme();
      }
    }

    private static class orderArticle_argsStandardScheme extends StandardScheme<orderArticle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, orderArticle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARTICLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.articleName = iprot.readString();
                struct.setArticleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECEIVE_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.receiveDate = iprot.readString();
                struct.setReceiveDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CUSTOMER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.customer = iprot.readString();
                struct.setCustomerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.amount = iprot.readI32();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, orderArticle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.articleName != null) {
          oprot.writeFieldBegin(ARTICLE_NAME_FIELD_DESC);
          oprot.writeString(struct.articleName);
          oprot.writeFieldEnd();
        }
        if (struct.receiveDate != null) {
          oprot.writeFieldBegin(RECEIVE_DATE_FIELD_DESC);
          oprot.writeString(struct.receiveDate);
          oprot.writeFieldEnd();
        }
        if (struct.customer != null) {
          oprot.writeFieldBegin(CUSTOMER_FIELD_DESC);
          oprot.writeString(struct.customer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class orderArticle_argsTupleSchemeFactory implements SchemeFactory {
      public orderArticle_argsTupleScheme getScheme() {
        return new orderArticle_argsTupleScheme();
      }
    }

    private static class orderArticle_argsTupleScheme extends TupleScheme<orderArticle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, orderArticle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArticleName()) {
          optionals.set(0);
        }
        if (struct.isSetReceiveDate()) {
          optionals.set(1);
        }
        if (struct.isSetCustomer()) {
          optionals.set(2);
        }
        if (struct.isSetAmount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetArticleName()) {
          oprot.writeString(struct.articleName);
        }
        if (struct.isSetReceiveDate()) {
          oprot.writeString(struct.receiveDate);
        }
        if (struct.isSetCustomer()) {
          oprot.writeString(struct.customer);
        }
        if (struct.isSetAmount()) {
          oprot.writeI32(struct.amount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, orderArticle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.articleName = iprot.readString();
          struct.setArticleNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.receiveDate = iprot.readString();
          struct.setReceiveDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.customer = iprot.readString();
          struct.setCustomerIsSet(true);
        }
        if (incoming.get(3)) {
          struct.amount = iprot.readI32();
          struct.setAmountIsSet(true);
        }
      }
    }

  }

  public static class orderArticle_result implements org.apache.thrift.TBase<orderArticle_result, orderArticle_result._Fields>, java.io.Serializable, Cloneable, Comparable<orderArticle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderArticle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new orderArticle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new orderArticle_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderArticle_result.class, metaDataMap);
    }

    public orderArticle_result() {
    }

    public orderArticle_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public orderArticle_result(orderArticle_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public orderArticle_result deepCopy() {
      return new orderArticle_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public orderArticle_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof orderArticle_result)
        return this.equals((orderArticle_result)that);
      return false;
    }

    public boolean equals(orderArticle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(orderArticle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("orderArticle_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class orderArticle_resultStandardSchemeFactory implements SchemeFactory {
      public orderArticle_resultStandardScheme getScheme() {
        return new orderArticle_resultStandardScheme();
      }
    }

    private static class orderArticle_resultStandardScheme extends StandardScheme<orderArticle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, orderArticle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, orderArticle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class orderArticle_resultTupleSchemeFactory implements SchemeFactory {
      public orderArticle_resultTupleScheme getScheme() {
        return new orderArticle_resultTupleScheme();
      }
    }

    private static class orderArticle_resultTupleScheme extends TupleScheme<orderArticle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, orderArticle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, orderArticle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
